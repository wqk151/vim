set nocompatible

" set the runtime path to include Vundle and initialize
" git clone https://github.com/gmarik/Vundle.vim.git ~/.vim/bundle/Vundle.vim
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'
" 自动缩进
Plugin 'vim-scripts/indentpython.vim'
"自动补全
Plugin 'Valloric/YouCompleteMe'
Plugin 'davidhalter/jedi'
" 配色方案 在xshell下不生效
Plugin 'altercation/vim-colors-solarized'
" show venv、git branch
Plugin 'Lokaltog/powerline', {'rtp': 'powerline/bindings/vim/'}
"自动补全引号,括号
"Plugin 'Raimondi/delimitMate'
Plugin 'majutsushi/tagbar'
" Emment
Plugin 'mattn/emmet-vim'
Plugin 'pangloss/vim-javascript'
Plugin 'nono/jquery.vim'
" NERDTree
Plugin 'scrooloose/nerdtree'
Plugin 'jistr/vim-nerdtree-tabs'
"Pyflakes
Plugin 'kevinw/pyflakes-vim'
" Fugitive -- 在vim中使用git命令
Plugin 'tpope/vim-fugitive'
" closetag
Plugin 'alvan/vim-closetag'
" tern_for_vim
Plugin 'marijnh/tern_for_vim'
" Command-T
"Plugin 'wincent/command-t'
" 快速打开文件
"Plugin 'vim-scripts/FuzzyFinder'
"快速打开历史文件
Plugin 'vim-scripts/mru.vim'
" 代码搜索
Plugin 'kien/ctrlp.vim'
" css3
Plugin 'hail2u/vim-css3-syntax'
Plugin 'ap/vim-css-color'
" 快速生成函数注释框架，声明框架
Plugin 'vim-scripts/DoxygenToolkit.vim'
" Add all your plugins here (note older versions of Vundle used Bundle instead of Plugin)
" All of your Plugins must be added before the following line
call vundle#end()            " required
"filetype plugin indent on    " required
" leader
" " 修改leader键
let mapleader = ','
let g:mapleader = ','

" syntax
" 开启语法高亮
syntax on

" history : how many lines of history VIM has to remember history存储容量
set history=2000

" filetype 检测文件类型
filetype on
" Enable filetype plugins
" " 允许插件
filetype plugin on
" 针对不同的文件类型采用不同的缩进格式
filetype indent on


" base
set nocompatible                " don't bother with vi compatibility
set autoread                    " reload files when changed on disk, i.e. via `git checkout`
set shortmess=atI

set magic                       " For regular expressions turn magic on
set title                       " change the terminal's title
set nobackup                    " do not keep a backup file

set novisualbell                " turn off visual bell
set noerrorbells                " don't beep
set visualbell t_vb=            " turn off error beep/flash
set t_vb=
set tm=500

" movement
set scrolloff=7                 " keep 3 lines when scrolling


" show
set ruler                       " show the current row and column
set number                      " show line numbers
set nowrap
set showcmd                     " display incomplete commands
set showmode                    " display current modes
set showmatch                   " jump to matches when entering parentheses
set matchtime=2                 " tenths of a second to show the matching parenthesis


" search
set hlsearch                    " highlight searches
set incsearch                   " do incremental searching, search as you type
set ignorecase                  " ignore case when searching
set smartcase                   " no ignorecase if Uppercase char present


" tab
set expandtab                   " expand tabs to spaces
set smarttab
set shiftround

" indent
set autoindent smartindent shiftround
set shiftwidth=4
set tabstop=4
set softtabstop=4                " insert mode tab and backspace use 4 spaces
" 光标横线
set cursorline
" 光标竖线
set cursorcolumn
hi CursorColumn cterm=NONE ctermbg=241 ctermfg=white guibg=darkred guifg=white

" NOT SUPPORT
" fold 自定义代码折叠，折叠（和取消折叠）
set foldenable
set foldmethod=indent
set foldlevel=0
" zM :close all; zR : open all.
map <leader>zz :call ToggleFold()<CR>
let g:FoldMethod = 1
fun! ToggleFold()
    if g:FoldMethod == 0
        exe "normal! zM"
        let g:FoldMethod = 1
    else
        exe "normal! zR"
        let g:FoldMethod = 0
    endif
endfun


" 设置可以高亮的关键字
if has("autocmd")
  " Highlight TODO, FIXME, NOTE, etc.
  if v:version > 701
    autocmd Syntax * call matchadd('Todo',  '\W\zs\(TODO\|FIXME\|CHANGED\|DONE\|XXX\|BUG\|HACK\)')
    autocmd Syntax * call matchadd('Debug', '\W\zs\(NOTE\|INFO\|IDEA\|NOTICE\)')
  endif
endif

" encoding
set encoding=utf-8
set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1
set termencoding=utf-8
set ffs=unix,dos,mac
set formatoptions+=m
set formatoptions+=B

" select & complete
set selection=inclusive
set selectmode=mouse,key

set completeopt=longest,menu
set wildmenu                           " show a navigable menu for tab completion"
set wildmode=longest,list,full
set wildignore=*.o,*~,*.pyc,*.class

" others
set backspace=indent,eol,start
set whichwrap+=<,>,h,l

" if this not work ,make sure .viminfo is writable for you,打开文件光标位于Vim上次退出时光标的位置
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" NOT SUPPORT
" Enable basic mouse behavior such as resizing buffers.
" set mouse=a


" ============================ theme and status line ============================
" theme
"set background=dark
" xshell下与powerline有冲突
"set statusline=%<%f\ %h%m%r%=%k[%{(&fenc==\"\")?&enc:&fenc}%{(&bomb?\",BOM\":\"\")}]\ %-14.(%l,%c%V%)\ %P
"colorscheme desert
"colorscheme solarized

" set mark column color
" 设置标记一列的背景颜色和数字一行颜色一致
hi! link SignColumn   LineNr
hi! link ShowMarksHLl DiffAdd
hi! link ShowMarksHLu DiffChange

" status line
" " 命令行（在状态行下）的高度，默认为1，这里是2
" xshell下与powerline有冲突
"set statusline=%<%f\ %h%m%r%=%k[%{(&fenc==\"\")?&enc:&fenc}%{(&bomb?\",BOM\":\"\")}]\ %-14.(%l,%c%V%)\ %P
" a
set laststatus=2   " Always show the status line - use 2 lines for the status bar


" ============================ specific file type ===========================

autocmd FileType python set tabstop=4 shiftwidth=4 expandtab ai
"autocmd FileType ruby set tabstop=2 shiftwidth=2 softtabstop=2 expandtab ai
autocmd BufRead,BufNew *.md,*.mkd,*.markdown  set filetype=markdown.mkd

autocmd BufNewFile *.sh,*.py exec ":call AutoSetFileHead()"
function! AutoSetFileHead()
    " .sh
    if &filetype == 'sh'
        call setline(1, "\#!/bin/bash")
    endif

    " python
    if &filetype == 'python'
        call setline(1, "\#!/usr/bin/env python")
        call append(1, "\# encoding: utf-8")
    endif

    normal G
    normal o
    normal o
endfunc

autocmd FileType c,cpp,java,go,php,javascript,puppet,python,rust,twig,xml,yml,perl autocmd BufWritePre <buffer> :call <SID>StripTrailingWhitespaces()
fun! <SID>StripTrailingWhitespaces()
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    call cursor(l, c)
endfun

" vimrc文件修改之后自动加载, linux
autocmd! bufwritepost .vimrc source %
" ============================ key map ============================

" 关闭方向键, 强迫自己用 hjkl
map <Left> <Nop>
map <Right> <Nop>
map <Up> <Nop>
map <Down> <Nop>

" 分屏窗口移动, Smart way to move between windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l
" 调整分屏窗口大小
nmap  <leader>k  :resize +5<CR>
nmap  <leader>j  :resize -5<CR>
nmap  <leader>h  :vertical resize -5<CR>
nmap  <leader>l  :vertical resize +5<CR>

nnoremap <C-d> yyp 

" 命令行模式增强，ctrl - a到行首， -e 到行尾
"cnoremap <C-j> <t_kd>
"cnoremap <C-k> <t_ku>
"cnoremap <C-a> <Home>
"cnoremap <C-e> <End>


" 插入模式下光标移动 -- 会造成Backspace键无法使用
"inoremap <D-L> <Esc>la
"inoremap <D-H> <Esc>ha
"inoremap <D-J> <Esc>ja
"inoremap <D-K> <Esc>ka
"
nnoremap <F2> :set nu! nu?<CR>
" nnoremap <F3> :set list! list?<CR>
" nnoremap <F4> :set wrap! wrap?<CR>
set pastetoggle=<F3>            "    when in insert mode, press <F5> to go to
                                "    paste mode, where you can paste mass data
                                "    that won't be autoindented
" au InsertLeave * set nopaste
" nnoremap <F6> :exec exists('syntax_on') ? 'syn off' : 'syn on'<CR>

" syntax support
autocmd Syntax javascript set syntax=jquery   " JQuery syntax support
" " js
let g:html_indent_inctags = "html,body,head,tbody"
let g:html_indent_script1 = "inc"
let g:html_indent_style1 = "inc"

" kj 替换 Esc
inoremap kj <Esc>

" Quickly close the current window
nnoremap <leader>q :q<CR>
" Quickly save the current file
nnoremap <leader>w :w<CR>

" 映射全选+复制 Ctrl+a
" 映射全选+剪切 Ctrl+x
" 选中状态下Ctrl+v 粘贴
"map <C-A> <Esc>ggVGy	" 映射全选+复制 Ctrl+a
"map <C-X> <Esc>ggVGd	" 映射全选+剪切 Ctrl+x
"map <C-V> <Esc>p		" 选中状态下Ctrl+v 粘贴

" 编辑完成后跳出括号
imap ,, <Esc>la
imap .. <Esc>2la

inoremap """ """"""<Esc>2hi<Space><Space><Esc>i
inoremap ''' ''''''<Esc>2hi<Space><Space><Esc>i

" 应用于django模板语言{%  %}
inoremap <leader>5 {}<Esc>i%<Space><Space>%<Esc>hi
" python3 print
imap print print()<Esc>i
" 搜索相关
map <space> /

" 新建tab  Ctrl+t
nnoremap <C-t>     :tabnew<CR>
inoremap <C-t>     <Esc>:tabnew<CR>
" tab切换
map <leader>th :tabfirst<cr>
map <leader>tl :tablast<cr>

map <leader>tj :tabnext<cr>
map <leader>tk :tabprev<cr>
map <leader>tn :tabnext<cr>
map <leader>tp :tabprev<cr>

map <leader>te :tabedit<cr>
map <leader>td :tabclose<cr>
map <leader>tm :tabm<cr>

" normal模式下切换到确切的tab
noremap <leader>1 1gt
noremap <leader>2 2gt
noremap <leader>3 3gt
noremap <leader>4 4gt
noremap <leader>5 5gt
noremap <leader>6 6gt
noremap <leader>7 7gt
noremap <leader>8 8gt
noremap <leader>9 9gt
noremap <leader>0 :tablast<cr>

"Keep search pattern at the center of the screen."
nnoremap <silent> n nzz
nnoremap <silent> N Nzz
nnoremap <silent> * *zz
nnoremap <silent> # #zz
nnoremap <silent> g* g*zz

" remove highlight
noremap <silent><leader>/ :nohls<CR>

"Reselect visual block after indent/outdent.调整缩进后自动选中，方便再次操作
vnoremap < <gv
vnoremap > >gv

" 交换 ' `, 使得可以快速使用'跳到marked位置
nnoremap ' `
nnoremap ` '
" y$ -> Y Make Y behave like other capitals
map Y y$

"Map ; to : and save a million keystrokes
" ex mode commands made easy 用于快速进入命令行
nnoremap ; :
" save
cmap w!! w !sudo tee >/dev/null %

nnoremap <Tab> >>_
nnoremap <S-Tab> <<_
inoremap <S-Tab> <C-D>
vnoremap <Tab> >gv
vnoremap <S-Tab> <gv

" YouCompleteMe settings
let g:ycm_collect_identifiers_from_comments_and_strings = 0
" 输入第0个字符开始补全
let g:ycm_min_num_of_chars_for_completion=0
" 禁止缓存匹配项,每次都重新生成匹配项
let g:ycm_cache_omnifunc=0
" 开启语义补全
let g:ycm_seed_identifiers_with_syntax=1
" 在注释输入中也能补全
let g:ycm_complete_in_comments = 1
" 在字符串输入中也能补全
let g:ycm_complete_in_strings = 1
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_autoclose_preview_window_after_insertion = 1
" let g:ycm_filetype_whitelist = { 'python': 1 }
let g:ycm_python_binary_path = 'python'
nnoremap <C-G>  :YcmCompleter GoToDefinitionElseDeclaration<CR>
"  fix .cpp error: ValueError: Still no compile flags, no completions yet.
let g:ycm_server_python_interpreter='/usr/bin/python'
let g:ycm_global_ycm_extra_conf = '~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'
" for powerline
set laststatus=2
syntax enable
set t_Co=256
"set background=dark
"colorscheme solarized
"set termencoding=utf-8
set guifont=Ubuntu\ Mono\ derivative\ Powerline:10
""set guifont=Ubuntu\ Mono
let g:Powerline_symbols = 'fancy'
"
"设置tagbar的窗口宽度
let g:tagbar_width=30
""设置tagbar的窗口显示的位置,为右边
let g:tagbar_right=1
"打开文件自动 打开tagbar
"autocmd BufReadPost *.cpp,*.c,*.h,*.hpp,*.cc,*.cxx call tagbar#autoopen()
""映射tagbar的快捷键
map <F9> :TagbarToggle<CR>

" 配置Emmet
let g:user_emmet_leader_key='<C-Z>'
" enable just for html/css
let g:user_emmet_install_global = 0
autocmd FileType htmldjango,html,css  EmmetInstall
" pyflakes
let g:pyflakes_prefer_python_version = 3
" closetag
let g:closetag_filenames = "*.html,*.xhtml,*.phtml,*.xml,*.js,*.tsx"
" tern_for_vim
let tern_show_signature_in_pum = 1
let tern_show_argument_hints = 'on_hold'
autocmd FileType javascript nnoremap <leader>d :TernDef<CR>
autocmd FileType javascript setlocal omnifunc=tern#Complete
" 目录树快捷键
map <F4> :NERDTreeToggle<CR>
" NERDTree settings
" 是否显示隐藏文件
let NERDTreeShowHidden=0
" 忽略以下文件的显示
let NERDTreeIgnore=['\.pyc','\~$','\.swp','__pycache__','\.git$','\.DS_Store']
" 设置NERDTree的宽度
let NERDTreeWinSize=20
" 使用pydoc查看Python帮助
nnoremap <buffer> H :<C-u>execute "!pydoc3 " . expand("<cword>")<CR>
let g:DoxygenToolkit_briefTag_pre="@Synopsis  "
let g:DoxygenToolkit_paramTag_pre="@Param "
let g:DoxygenToolkit_returnTag="@Returns   "
" MRU - 快速打开历史文件
nnoremap <leader>e :Mru<CR>
let MRU_Max_Entries = 1000
let MRU_Exclude_Files= '.(exe|so|dll|zip|tar|tar.gz|pyc)$'
let MRU_Window_Height = 15
"let MRU_Use_Current_Window = 1
let MRU_Auto_Close = 0
let MRU_Max_Menu_Entries = 20
let MRU_Max_Submenu_Entries = 15

" ctrlp 配置
map <leader>f :CtrlPMRU<CR>
let g:ctrlp_custom_ignore = {
            \  'dir':  '\v[\/]\.(git|hg|svn|rvm)$',
            \  'file': '\v\.(exe|so|dll|zip|tar|tar.gz|pyc)$',
            \}
let g:ctrlp_working_path_mode=0
let g:ctrlp_match_window_bottom=1
let g:ctrlp_max_height=20
let g:ctrlp_match_window_reversed=0
let g:ctrlp_mruf_max=500
let g:ctrlp_follow_symlinks=1
" CSS3
augroup VimCSS3Syntax
  autocmd!

  autocmd FileType css setlocal iskeyword+=-
augroup END
" airline
"if !exists('g:airline_symbols')
"    let g:airline_symbols = {}
"endif
" old vim-powerline symbols
"let g:airline_left_sep = '⮀'
"let g:airline_left_alt_sep = '⮁'
"let g:airline_right_sep = '⮂'
"let g:airline_right_alt_sep = '⮃'
"let g:airline_symbols.branch = '⭠'
"let g:airline_symbols.readonly = '⭤'
"let g:airline_symbols.linenr = '⭡'
"let g:airline_theme="bubblegum" 
"按F5运行python"
"function! CheckPythonSyntax() 
"    let mp = &makeprg 
"    let ef = &errorformat 
"    let exeFile = expand("%:t") 
"    setlocal makeprg=/data/apps/python3/bin/python3\ -u 
"    set efm=%C\ %.%#,%A\ \ File\ \"%f\"\\,\ line\ %l%.%#,%Z%[%^\ ]%\\@=%m 
"    silent make % 
"    copen 
"    let &makeprg     = mp 
"    let &errorformat = ef 
"endfunction
"au filetype python map <F5>  :w<CR>:call CheckPythonSyntax() <CR>
"au filetype python imap <F5> <Esc>:w<CR>:call CheckPythonSyntax() <CR>
map <F5> :call CompileRunGcc()<CR>
func! CompileRunGcc()
    exec "w"
    if &filetype == 'c'
        exec "!g++ % -o %<"
        exec "!time ./%<"
    elseif &filetype == 'cpp'
        exec "!g++ % -o %<"
        exec "!time ./%<"
    elseif &filetype == 'java'
        exec "!javac %"
        exec "!time java %<"
    elseif &filetype == 'sh'
        exec "!time bash %"
    elseif &filetype == 'python'
        exec "!time python %"
    elseif &filetype == 'html'
        exec "!firefox % &"
    elseif &filetype == 'go'
        exec "!time go run %"
    elseif &filetype == 'mkd'
        exec "!~/.vim/markdown.pl % > %.html &"
        exec "!firefox %.html &"
    endif
endfunc
